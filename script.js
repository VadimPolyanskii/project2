'use strict';

let money, time; // здесь мы вывели наши переменные, чтобы они находились в глобальной области видимости, а не только в функции, то есть работали и вне функции.

// создаём функцию, в которую заключаем наши вопросы пользователю.
function start() {
    money = +prompt("Ваш бюджет на месяц?", '');
    time = prompt("Введите дату в формате YYYY-MM-DD", '');

    // далее создаём цикл, при котором вопросы пользователю будут повторяться до тех пор, пока он не даст корректные ответы. Мы проверяем переменную money.
    while(isNaN(money) || money == "" || money == null) { // команда isNaN возвращает true тогда, когда в ответ (в переменную maney) попадают  НЕ цифры; то есть написал юзер в ответ  целую строку или буквы. Также мы проверяем нашу переменную maney на предмет пустой строки (money == ""); т.е. нам не нужно, чтобы строка осталась пустой. Далее мы проверяем (money == null), чтобы пользователь НЕ мог нажать кнопку отмены. Таким образом, если одно из условий выполнится (т.е. будет введена НЕкорректная инф-я), цикл будет повторяться, пока юзер не даст нужные ответы.
        money = +prompt("Ваш бюджет на месяц?", ''); // здесь мы снова размещаем тот же вопрос, чтобы, если понадобится, он мог повторяться.
    } 
} 
start(); // а здесь вызваем нашу функцию, чтобы она выполнилась.

// здесь мы с самого начала создали объект с определёнными свойствами и значениями в соответствии с нашей задачей, предварительно объявив переменные, а уже под него начали создавать всё остальное.
let appData = {
    budget: money,
    timeData: time,
    expenses: {},
    optionalExpenses: {
        1 : "c",
        2 : "c",
        3 : "c"
    },
    income: [],
    savings: true
};


// далее создаём выбор обязательных расходов в виде функции (chooseExpenses), в которую заключим наши вопросы пользователю.
function chooseExpenses() {
    for (let i = 0; i < 2; i++) {
        let a = prompt("Введите обязательную статью расходов в этом месяце", ''),
            b = prompt("Во сколько обойдется?", '');
    
        // здесь мы содаём проверку ответов юзера (проверяем переменные a и b на тип данных и вид ответа), и задаём для них определённые условия, невыполнение которых будет откатывать цикл назад, и вопросы будут повторяться, пока не будет дан корректный ответ.
        if ( (typeof(a))=== 'string' && (typeof(a)) != null && (typeof(b)) != null 
            && a != '' && b != '' && a.length < 50) {
            console.log("done"); // done - наша условная фраза, кот. выводится в консоль, как знак, что проверка ответов прошла.
            appData.expenses[a] = b; // здесь мы присваиваем свойству expenses новое значение.
        } else {
            i--;
            console.log("done"); // done - наша условная фраза, кот. выводится в консоль, как знак, что, в виду правильных ответов, цикл остановился.
        } 
    }
}  
// далее, чтобы пользователь мог всё-таки оформить расходы, вызываем функцию.
chooseExpenses(); 

// здесь мы потренировались использовать все виды циклов, но использовать будем один, поэтому закомментируем другие два.
// let i = 0;
// do {
//     let a = prompt("Введите обязательную статью расходов в этом месяце", ''),
//     b = prompt("Во сколько обойдется?", '');
//     i++;

//     if ( (typeof(a))=== 'string' && (typeof(a)) != null && (typeof(b)) != null 
//     && a != '' && b != '' && a.length < 50) {
//     console.log("done");
//     appData.expenses[a] = b;
//     } else {
//         i = i - 1;
//         console.log("done");
//     } 
// } 
// while (i < 2);let i = 0;
// while (i < 2) {
//     let a = prompt("Введите обязательную статью расходов в этом месяце", ''),
//         b = prompt("Во сколько обойдется?", '');
//     i++;

//     if ( (typeof(a))=== 'string' && (typeof(a)) != null && (typeof(b)) != null 
//         && a != '' && b != '' && a.length < 50) {
//         console.log("done");
//         appData.expenses[a] = b;
//     } else {
//         i -= 1;
//         console.log("done");
//     }
// }; 

// далее для нашего объекта мы создаём новое свойство moneyPerDay (бюджет на день) и присваеваем ему значение свойства из нашего объекта . Также применяем метод округления числа toFixed; обязательно ставим скобки, т.к. это метод, т.е. мы что-то делаем, как-то преобразовываем наше значение. И если мы оставим скобки пустыми, то округлим наше число до ближайшего целого; если же поставим в скобках 1, то округлим до первого знака, и т.д. Также, чтобы избежать ошибок, важно помнить, что toFixed меняет нашу переменную, - он возвращает строковое значение.
// appData.moneyPerDay = (appData.budget / 30).toFixed(); 

// alert("Ежедневный бюджет: " + appData.moneyPerDay);



// далее создаём новую функцию checkSavings (проверить сбережения) для проверки депозита юзера, если он есть.
function checkSavings() {
    if (appData.savings == true) /* здесь мы создаём проверку условиями, что действительно ли он стоит в true - только в таком случае у нас будут выполняться какие-то действия */ {
        let save = +prompt("Какова сумма накоплений?"),
            percent = +prompt("Под какой процент?");

            // теперь создаём новое свойство monthIncome (доход или прибыль за месяц) нашего объекта appData, которому присваиваем значение на основании тех данных, кот. ввёл пользователь.
            appData.monthIncome = save/100/12*percent; 
            alert("Доход в месяц с Вашего депозита: " + appData.monthIncome);  // и выводим результат в окно-оповещение для юзера, куда копируем нашу новую переменную appData.monthIncome.
    }
}
// далее чтобы запустить нашу функцию, нужно её вызывать. Она работает только тогда, когда пользователь дал какие-то данные по сбережениям (депозиту)
checkSavings(); 


let moneyPerDay = (appData.budget / 30).toFixed();
// теперь нужно оформить расчет дневного бюджета и вывод на экран этого значения как одну функцию (detectDayBudget).
function detectDayBudget() {
    alert("Ежедневный бюджет: " + moneyPerDay);
}
// detectDayBudget(); // вызывать функцию необязат. (дом.зад)

// оформляем блок кода с расчетом уровня достатка как отдельную функцию (detectLevel).
function detectLevel() {
    // здесь мы создали условия и действия, кот. будут выполняться взависимости от соблюдений или несоблюдений наших условий.
    if (moneyPerDay < 100) {
        console.log("Минимальный уровень достатка");
    } else if (moneyPerDay > 100 && moneyPerDay < 2000) {
        console.log("Средний уровень достатка");
    } else if (moneyPerDay > 2000) {
        console.log("Высокий уровень достатка");
    } else {
        console.log("Произошла ошибка");
    }
    }
// detectLevel(); // вызывать функцию необязат. (дом.зад)

function chooseOptExpenses() {
        for (let i = 0; i < 3; i++) {
            let c = prompt("Статья необязательных расходов?", '');

            if ( (typeof(c))=== 'string' && (typeof(c)) != '' && (typeof(c)) != null && c.length < 50) {
                console.log("done");
                appData.optionalExpenses[c];
            } else {
                i--;
                console.log("done");
            }
        }
    }
    
    // chooseOptExpenses(); // вызывать функцию необязат. (дом.зад)
    